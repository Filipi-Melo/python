from typing import Any, Callable, Generic, Iterable, ParamSpec, TypeVar
from typing_extensions import Self

NULL:Any = object()
T = TypeVar('T')
T2 = TypeVar('T2')
P = ParamSpec('P')
P2 = ParamSpec('P2')

class Register(Generic[P,T]):
    name:str
    def __init__(self, function:Callable[P,T], name:str) -> None:...
    def __call__(self, *args:P.args, **kwargs:P.kwargs) -> T:...
    def register(self, function:Callable[P2,T2]) -> Callable[P2,T2]|Self:...
    def select(self, param:Any=NULL, Return:Any=NULL) -> Callable[P,T]:...
    def extend(self, iterable:Iterable[Callable[P2,T2]]) -> None:...
    def insert(self, index:int, function:Callable[P2,T2]) -> None:... 
    def pop(self, index:int = -1) -> Callable[P,T]:...
    def remove(self, function:Callable[P2,T2]) -> None:...
    def __getitem__(self, index:int) -> Callable[P,T]:...
    def __setitem__(self, index:int, function:Callable[P2,T2]) -> None:...
    def __delitem__(self, index:int) -> None:...
    def __iter__(self) -> list[Callable[P,T]]:...
    def _get_(self, instance:Any, owner:Any=None) -> Callable[P,T]:...

class Overload:
    registers:dict[str, Register]
    def __new__(cls, function:Callable[P,T]) -> Register[P,T]:...

def main() -> None:...